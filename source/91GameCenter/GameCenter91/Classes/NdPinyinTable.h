#if !defined PY_H__
#define PY_H__


/*PyIndex, index of 412 pin yin*/
typedef enum PyIndex{
                PY_A=0,
				PY_AI,
				PY_AN,
				PY_ANG,
				PY_AO,
				PY_BA,
				PY_BAI,
				PY_BAN,
				PY_BANG,
				PY_BAO,
				PY_BEI,
				PY_BEN,
				PY_BENG,
				PY_BI,
				PY_BIAN,
				PY_BIAO,
				PY_BIE,
				PY_BIN,
				PY_BING,
				PY_BO, 
				PY_BU,
				PY_CA,
				PY_CAI,
				PY_CAN,
				PY_CANG,
				PY_CAO,
				PY_CE,
				PY_CEN,
				PY_CENG,
				PY_CHA,
				PY_CHAI,
				PY_CHAN,
				PY_CHANG,
				PY_CHAO, 
				PY_CHE,
				PY_CHEN,
				PY_CHENG,
				PY_CHI,
				PY_CHONG,
				PY_CHOU,
				PY_CHU,
				PY_CHUAI,
				PY_CHUAN,
				PY_CHUANG,
				PY_CHUI,
				PY_CHUN,
				PY_CHUO,
				PY_CI,
				PY_CONG,
				PY_COU,
				PY_CU,
				PY_CUAN,
				PY_CUI,
				PY_CUN,
				PY_CUO,
				PY_DA,
				PY_DAI,
				PY_DAN,
				PY_DANG,
				PY_DAO,
				PY_DE,
				PY_DEI,
				PY_DENG,
				PY_DI,
				PY_DIA,
				PY_DIAN,
				PY_DIAO,
				PY_DIE,
				PY_DING,
				PY_DIU,
				PY_DONG,
				PY_DOU,
				PY_DU,
				PY_DUAN,
				PY_DUI,
				PY_DUN,
				PY_DUO,
				PY_E,
				PY_EI,
				PY_EN,
				PY_ER,
				PY_FA,
				PY_FAN,
				PY_FANG,
				PY_FEI,
				PY_FEN,
				PY_FENG,
				PY_FO,
				PY_FOU,
				PY_FU,
				PY_GA,
				PY_GAI,
				PY_GAN,
				PY_GANG,
				PY_GAO,
				PY_GE,
				PY_GEI,
				PY_GEN,
				PY_GENG,
				PY_GONG,
				PY_GOU,
				PY_GU,
				PY_GUA,
				PY_GUAI,
				PY_GUAN,
				PY_GUANG,
				PY_GUI,
				PY_GUN,
				PY_GUO,
				PY_HA,
				PY_HAI,
				PY_HAN,
				PY_HANG,
				PY_HAO,
				PY_HE,
				PY_HEI,
				PY_HEN,
				PY_HENG,
				PY_HNG,
				PY_HONG,
				PY_HOU,
				PY_HU,
				PY_HUA,
				PY_HUAI,
				PY_HUAN,
				PY_HUANG,
				PY_HUI,
				PY_HUN,
				PY_HUO,
				PY_JI,
				PY_JIA,
				PY_JIAN,
				PY_JIANG,
				PY_JIAO,
				PY_JIE,
				PY_JIN,
				PY_JING,
				PY_JIONG,
				PY_JIU,
				PY_JU,
				PY_JUAN,
				PY_JUE,
				PY_JUN,
				PY_KA,
				PY_KAI,
				PY_KAN,
				PY_KANG,
				PY_KAO,
				PY_KE,
				PY_KEN,
				PY_KENG,
				PY_KONG,
				PY_KOU,
				PY_KU,
				PY_KUA,
				PY_KUAI,
				PY_KUAN,
				PY_KUANG,
				PY_KUI,
				PY_KUN,
				PY_KUO,
				PY_LA,
				PY_LAI,
				PY_LAN,
				PY_LANG,
				PY_LAO,
				PY_LE,
				PY_LEI,
				PY_LENG,
				PY_LI,
				PY_LIA,
				PY_LIAN,
				PY_LIANG,
				PY_LIAO,
				PY_LIE,
				PY_LIN,
				PY_LING,
				PY_LIU,
				PY_LO,
				PY_LONG,
				PY_LOU, 
				PY_LU,
				PY_LV,
				PY_LVE,
				PY_LUAN,
				PY_LUE,
				PY_LUN,
				PY_LUO,
				PY_M,
				PY_MA,
				PY_MAI,
				PY_MAN,
				PY_MANG,
				PY_MAO,
				PY_ME,
				PY_MEI,
				PY_MEN,
				PY_MENG,
				PY_MI,
				PY_MIAN,
				PY_MIAO,
				PY_MIE,
				PY_MIN,
				PY_MING,
				PY_MIU,
				PY_MO,
				PY_MOU,
				PY_MU,
				PY_N,
				PY_NA,
				PY_NAI,
				PY_NAN,
				PY_NANG,
				PY_NAO,
				PY_NE,
				PY_NEI,
				PY_NEN,
				PY_NENG,
				PY_NG,
				PY_NI,
				PY_NIAN,
				PY_NIANG, 
				PY_NIAO,
				PY_NIE,
				PY_NIN,
				PY_NING,
				PY_NIU,
				PY_NONG,
				PY_NOU,
				PY_NU,
				PY_NV,
				PY_NVE,
				PY_NUAN,
				PY_NUE,
				PY_NUO,
				PY_O,
				PY_OU,
				PY_PA,
				PY_PAI,
				PY_PAN,
				PY_PANG,
				PY_PAO,
				PY_PEI,
				PY_PEN,
				PY_PENG,
				PY_PI,
				PY_PIAN,
				PY_PIAO,
				PY_PIE,
				PY_PIN,
				PY_PING,
				PY_PO,
				PY_POU,
				PY_PU,
				PY_QI,
				PY_QIA,
				PY_QIAN,
				PY_QIANG,
				PY_QIAO,
				PY_QIE,
				PY_QIN,
				PY_QING,
				PY_QIONG,
				PY_QIU,
				PY_QU,
				PY_QUAN,
				PY_QUE,
				PY_QUN,
				PY_RAN,
				PY_RANG,
				PY_RAO,
				PY_RE,
				PY_REN,
				PY_RENG,
				PY_RI,
				PY_RONG,
				PY_ROU,
				PY_RU,
				PY_RUAN,
				PY_RUI,
				PY_RUN,
				PY_RUO,
				PY_SA,
				PY_SAI,
				PY_SAN,
				PY_SANG,
				PY_SAO,
				PY_SE,
				PY_SEN,
				PY_SENG,
				PY_SHA,
				PY_SHAI,
				PY_SHAN,
				PY_SHANG, 
				PY_SHAO,
				PY_SHE,
				PY_SHEI,
				PY_SHEN,
				PY_SHENG,
				PY_SHI,
				PY_SHOU,
				PY_SHU,
				PY_SHUA,
				PY_SHUAI,
				PY_SHUAN,
				PY_SHUANG,
				PY_SHUI,
				PY_SHUN,
				PY_SHUO, 
				PY_SI,
				PY_SONG,
				PY_SOU,
				PY_SU,
				PY_SUAN,
				PY_SUI,
				PY_SUN,
				PY_SUO,
				PY_TA,
				PY_TAI, 
				PY_TAN,
				PY_TANG,
				PY_TAO,
				PY_TE,
				PY_TEI,
				PY_TENG, 
				PY_TI,
				PY_TIAN,
				PY_TIAO,
				PY_TIE,
				PY_TING,
				PY_TONG,
				PY_TOU,
				PY_TU,
				PY_TUAN,
				PY_TUI,
				PY_TUN,
				PY_TUO,
				PY_WA,
				PY_WAI,
				PY_WAN,
				PY_WANG,
				PY_WEI,
				PY_WEN,
				PY_WENG, 
				PY_WO,
				PY_WU,
				PY_XI,
				PY_XIA,
				PY_XIAN,
				PY_XIANG,
				PY_XIAO,
				PY_XIE,
				PY_XIN,
				PY_XING,
				PY_XIONG, 
				PY_XIU,
				PY_XU,
				PY_XUAN,
				PY_XUE,
				PY_XUN,
				PY_YA,
				PY_YAN,
				PY_YANG, 
				PY_YAO,
				PY_YE,
				PY_YI,
				PY_YIN,
				PY_YING,
				PY_YO,
				PY_YONG,
				PY_YOU,
				PY_YU,
				PY_YUAN,
				PY_YUE,
				PY_YUN,
				PY_ZA,
				PY_ZAI,
				PY_ZAN,
				PY_ZANG,
				PY_ZAO,
				PY_ZE,
				PY_ZEI,
				PY_ZEN,
				PY_ZENG,
				PY_ZHA,
				PY_ZHAI,
				PY_ZHAN,
				PY_ZHANG, 
				PY_ZHAO, 
				PY_ZHE,
				PY_ZHEI,
				PY_ZHEN,
				PY_ZHENG, 
				PY_ZHI,
				PY_ZHONG,
				PY_ZHOU,
				PY_ZHU,
				PY_ZHUA,
				PY_ZHUAI,
				PY_ZHUAN,
				PY_ZHUANG, 
				PY_ZHUI,
				PY_ZHUN,
				PY_ZHUO, 
				PY_ZI,
				PY_ZONG,
				PY_ZOU,
				PY_ZU,
				PY_ZUAN,
				PY_ZUI,
				PY_ZUN,
				PY_ZUO,
				PY_NOTEXISTED,
			}PyIndex;


typedef struct PyMatch{
		   PyIndex p_index;            //pyin's index
   		   const char *spell;                //pyin
		   int  buttonNo;              //number on mobile's keyboard
       	}PyMatch;

/*store the chinese word's code, uincode and ucs2*/
typedef struct CodeIndex{
	unsigned char unicode_part1;
	unsigned char unicode_part2;
	unsigned char ucs2_part1;
	unsigned char ucs2_part2; 
	PyIndex  p_index;
}CodeIndex;




/*********************************************************/
/* 功能： 二分搜索，返回汉字对应的拼音的枚举类型。             */
/* 参数 part1: 汉字编码的高位;                             */
/* 参数 part2: 汉字编码的地位；							 */
/* 参数 code_type:编码类型，1代表Unicode编码，0代表USC2编码  */
/*********************************************************/

PyIndex binarySearch( unsigned char part1,unsigned char part2, char code_type);




/**********************************************************/
/* 功能： 通过汉字的Unicode码取得汉字拼音索引                 */
/* 参数 ch[] - 存储一个汉字的数组，一个汉字有两个字节存储      */
/* 参数 result[] - 返回的对应汉字的拼音                      */
/**********************************************************/

char * convertToWordPy( char ch[],char result[]);



/************************************************************/
/* 功能： 根据汉字的Unicode码，取得一串汉字的拼音				*/
/* 参数 str[] - 存储汉字字符串的数组，一个汉字有两个字节存储		*/
/* 参数 result[] - 返回的汉字字符串对应的拼音数组				*/
/* return the first character of every chinese word			*/
/************************************************************/

char * convertWordsToPy(char str[], char result[]);



/************************************************************/
/* 功能： 取得汉字对应的拼音，并和传进来的拼音进行比较，看是否匹配	*/
/* 参数 chnStr - 存储汉字字符串的数组							*/
/* 参数 keyPy  - 输入的匹配字符串								*/
/* 返回 该汉字字符串和该拼音字符串是否匹配						*/
/************************************************************/

int isMatch(char* chnStr, char* keyPy);


void NdPinyinIndexMatchTest();

#endif
